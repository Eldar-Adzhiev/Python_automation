# области видимости
a = 0  # неизменяемый


def func(a):
    a += 1
    print(a)


# передаем неизменяемый тип, то есть передаем значение 1
func(1)  # 2
# передаем неизменяемый тип, то есть передаем значение 2
func(2)  # 3

print(a)  # 0, менялся переданный объект, а не глобальный





# аргумент по умолчанию
a = 0  # неизменяемый

def func(a=a):
    a += 1
    print(a)


# ничего не передаем, берется значение по умолчанию 0, берется значение
func()  # 1
# передаем неизменяемый тип, то есть передаем значение 2
func(2)  # 3

print(a)  # 0, менялся переданный объект (даже в случае по умолчанию), а не глобальный




lst = []  # изменяемый


def func(a=lst):
    a.append(1)
    print(a)


# ничего не передаем, проставляется ссылка на изменяемый -> меняется глобальный lst
func()  # [1]
func()  # [1, 1]
func()  # [1, 1, 1]

# передаем новый список каждый раз, проставляется ссылка на изменяемый объект, но каждый раз новый
# -> меняется только переданный []
func([])  # [1]
func([])  # [1]
func([])  # [1]




def func(lst):
    lst.append(1)
    print(lst)


li = [1, 2, 3, 4, 5]  # изменяемый

# передаем один список каждый раз, проставляется ссылка на изменяемый объект -> меняется li
func(li)  # [1, 2, 3, 4, 5, 1]
func(li)  # [1, 2, 3, 4, 5, 1, 1]





b = 0

def func(a):
    print(a)  # видим как переданный аргумент
    print(b)  # видим на вышестоящем скоупе, на чтение доступно


func(0)  # 0 0





var = 0

def func(a):
    global var  # объявляем глобальным, можем изменять вышестоящий var
    var += 1

    print(a)    # видим как переданный аргумент
    print(var)  # видим как глобальную переменную


func(0)     # 0 1
print(var)  # 1

empty_list = []
empty_list1 = list()

# изменяем исходный список, добавляя в него элементы
empty_list.append('123')  # ['123']
empty_list.append('456')  # ['123', '456']
empty_list.extend(['666', '777', '888'])  # ['123', '456', '666', '777', '888']

len(empty_list)  # 5

empty_list[0]  # '123'
empty_list[-1]  # '888'

# умножение создает новый список, не трогая оригинальный
empty_list * 2  # ['123', '456', '666', '777', '888', '123', '456', '666', '777', '888']

# слайсинг создает новый список - [нижняя граница:верхняя граница:шаг]
# верхняя граница - не включительно. шаг может быть отрицательным
empty_list[3:0:-1]  # от 3 до 0 с шагом -1 ['777', '666', '456']
empty_list[3:10000]  # от 3 до 10000, даже если 10000 нет ['777', '888']


new = [12, 123, 3.1]
new.append(['111', 222, 444.44])  # элементом списка может быть любой объект, даже еще один список

x = new.pop(0)  # удаляем 0 элемент, возвращаем его значение
# x
# >>> 12
# new
# >>> [123, 3.1]

# сортируем оригинальный список (reverse - в обратном порядке)
new.sort(reverse=True)

# создаем копию списка и сортируем уже ее, не трогая оригинал
sorted(new)

# разворачиваем исходный список в обратную сторону, без создания копии
new.reverse()

# создаем копию и разворачиваем уже ее, не трогая оригинал
reversed(new)


new[1] = 9999999  # меняем 1 элемент списка
del new[1]  # удаляем 1 элемент из списка
new.remove(3.1)  # удаляем все числа 3.1 из списка


bool([])  # False
bool([1, 2, 3])  # True
bool([0])  # True
bool([[]])  # True, список с пустым списком - не пустой
